{"ast":null,"code":"import io from 'socket.io-client';\nclass SocketService {\n  constructor() {\n    this.socket = null;\n    this.connected = false;\n  }\n  connect(token) {\n    const SOCKET_URL = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';\n    this.socket = io(SOCKET_URL, {\n      auth: {\n        token\n      },\n      transports: ['websocket', 'polling'],\n      upgrade: true,\n      reconnection: true,\n      reconnectionDelay: 1000,\n      reconnectionAttempts: 5,\n      maxReconnectionAttempts: 5\n    });\n    this.socket.on('connect', () => {\n      console.log('Connected to server');\n      this.connected = true;\n    });\n    this.socket.on('disconnect', () => {\n      console.log('Disconnected from server');\n      this.connected = false;\n    });\n    this.socket.on('connect_error', error => {\n      console.error('Connection error:', error);\n      this.connected = false;\n    });\n    return this.socket;\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n      this.connected = false;\n    }\n  }\n  isConnected() {\n    var _this$socket;\n    return this.connected && ((_this$socket = this.socket) === null || _this$socket === void 0 ? void 0 : _this$socket.connected);\n  }\n\n  // Message methods\n  sendMessage(messageData) {\n    if (this.socket) {\n      this.socket.emit('send_message', messageData);\n    }\n  }\n  onMessage(callback) {\n    if (this.socket) {\n      this.socket.on('receive_message', callback);\n    }\n  }\n\n  // Room methods\n  joinRoom(roomId) {\n    if (this.socket) {\n      this.socket.emit('join_room', roomId);\n    }\n  }\n\n  // Typing methods\n  startTyping(room) {\n    if (this.socket) {\n      this.socket.emit('typing_start', {\n        room\n      });\n    }\n  }\n  stopTyping(room) {\n    if (this.socket) {\n      this.socket.emit('typing_stop', {\n        room\n      });\n    }\n  }\n  onTyping(callback) {\n    if (this.socket) {\n      this.socket.on('user_typing', callback);\n    }\n  }\n\n  // User methods\n  onUsersUpdated(callback) {\n    if (this.socket) {\n      this.socket.on('users_updated', callback);\n    }\n  }\n\n  // Error handling\n  onError(callback) {\n    if (this.socket) {\n      this.socket.on('error', callback);\n    }\n  }\n\n  // Remove listeners\n  removeAllListeners() {\n    if (this.socket) {\n      this.socket.off('receive_message');\n      this.socket.off('user_typing');\n      this.socket.off('users_updated');\n      this.socket.off('error');\n      // Add any other custom events you use\n    }\n  }\n}\nconst initializeSocket = new SocketService();\nexport default initializeSocket;","map":{"version":3,"names":["io","SocketService","constructor","socket","connected","connect","token","SOCKET_URL","process","env","REACT_APP_SOCKET_URL","auth","transports","upgrade","reconnection","reconnectionDelay","reconnectionAttempts","maxReconnectionAttempts","on","console","log","error","disconnect","isConnected","_this$socket","sendMessage","messageData","emit","onMessage","callback","joinRoom","roomId","startTyping","room","stopTyping","onTyping","onUsersUpdated","onError","removeAllListeners","off","initializeSocket"],"sources":["C:/Users/SANAL/chat-app/frontend/src/services/socket.js"],"sourcesContent":["import io from 'socket.io-client';\r\n\r\nclass SocketService {\r\n  constructor() {\r\n    this.socket = null;\r\n    this.connected = false;\r\n  }\r\n\r\n  connect(token) {\r\n    const SOCKET_URL = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';\r\n    \r\n    this.socket = io(SOCKET_URL, {\r\n      auth: { token },\r\n      transports: ['websocket', 'polling'],\r\n      upgrade: true,\r\n      reconnection: true,\r\n      reconnectionDelay: 1000,\r\n      reconnectionAttempts: 5,\r\n      maxReconnectionAttempts: 5,\r\n    });\r\n\r\n    this.socket.on('connect', () => {\r\n      console.log('Connected to server');\r\n      this.connected = true;\r\n    });\r\n\r\n    this.socket.on('disconnect', () => {\r\n      console.log('Disconnected from server');\r\n      this.connected = false;\r\n    });\r\n\r\n    this.socket.on('connect_error', (error) => {\r\n      console.error('Connection error:', error);\r\n      this.connected = false;\r\n    });\r\n\r\n    return this.socket;\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.socket) {\r\n      this.socket.disconnect();\r\n      this.socket = null;\r\n      this.connected = false;\r\n    }\r\n  }\r\n\r\n  isConnected() {\r\n    return this.connected && this.socket?.connected;\r\n  }\r\n\r\n  // Message methods\r\n  sendMessage(messageData) {\r\n    if (this.socket) {\r\n      this.socket.emit('send_message', messageData);\r\n    }\r\n  }\r\n\r\n  onMessage(callback) {\r\n    if (this.socket) {\r\n      this.socket.on('receive_message', callback);\r\n    }\r\n  }\r\n\r\n  // Room methods\r\n  joinRoom(roomId) {\r\n    if (this.socket) {\r\n      this.socket.emit('join_room', roomId);\r\n    }\r\n  }\r\n\r\n  // Typing methods\r\n  startTyping(room) {\r\n    if (this.socket) {\r\n      this.socket.emit('typing_start', { room });\r\n    }\r\n  }\r\n\r\n  stopTyping(room) {\r\n    if (this.socket) {\r\n      this.socket.emit('typing_stop', { room });\r\n    }\r\n  }\r\n\r\n  onTyping(callback) {\r\n    if (this.socket) {\r\n      this.socket.on('user_typing', callback);\r\n    }\r\n  }\r\n\r\n  // User methods\r\n  onUsersUpdated(callback) {\r\n    if (this.socket) {\r\n      this.socket.on('users_updated', callback);\r\n    }\r\n  }\r\n\r\n  // Error handling\r\n  onError(callback) {\r\n    if (this.socket) {\r\n      this.socket.on('error', callback);\r\n    }\r\n  }\r\n\r\n  // Remove listeners\r\n  removeAllListeners() {\r\n    if (this.socket) {\r\n      this.socket.off('receive_message');\r\n      this.socket.off('user_typing');\r\n      this.socket.off('users_updated');\r\n      this.socket.off('error');\r\n      // Add any other custom events you use\r\n    }\r\n  }\r\n}\r\n\r\nconst initializeSocket = new SocketService();\r\nexport default initializeSocket;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}